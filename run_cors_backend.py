#!/usr/bin/env python
"""
Run script for the Job Recommender API backend with CORS middleware.
This script ensures that the backend module is properly imported and CORS is enabled.
"""
import uvicorn
import sys
import os
from pathlib import Path
from dotenv import load_dotenv
import importlib
import argparse

# Add the current directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Load environment variables from .env file (first from root, then fallback to backend/utils)
root_env_path = ".env"
backend_env_path = os.path.join("backend", "utils", ".env")

if os.path.exists(root_env_path):
    load_dotenv(dotenv_path=root_env_path)
    print(f"Loaded environment from {root_env_path}")
elif os.path.exists(backend_env_path):
    load_dotenv(dotenv_path=backend_env_path)
    print(f"Loaded environment from {backend_env_path}")
else:
    print("Warning: No .env file found. Using default environment variables.")

def create_cors_startup_script():
    """Create a startup script that will be executed when the app is loaded"""
    try:
        with open("backend/cors_startup.py", "w") as f:
            f.write("""
# This file is auto-generated by run_cors_backend.py
# It applies CORS middleware to the FastAPI app on startup

from fastapi.middleware.cors import CORSMiddleware
from backend.app_with_candidates import app

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3005", "http://127.0.0.1:3000", "http://127.0.0.1:3005"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
""")
        print("Created CORS startup script at backend/cors_startup.py")
        return True
    except Exception as e:
        print(f"Error creating CORS startup script: {str(e)}")
        return False

def run_backend_with_cors(reload_mode=True):
    """Run the backend with CORS middleware"""
    try:
        # Set encoding environment variable to UTF-8 to avoid encoding issues on Windows
        if os.name == 'nt':  # Windows
            os.environ['PYTHONIOENCODING'] = 'utf-8'
            
        print("Starting Job Recommender API backend with CORS middleware...")
        print("Using enhanced backend (backend/app_with_candidates.py) with all APIs + working candidates endpoint...")
        
        # Create the CORS startup script
        if not create_cors_startup_script():
            print("Failed to create CORS startup script. Running without CORS middleware.")
            # Run without CORS middleware as fallback
            uvicorn.run("backend.app_with_candidates:app", host="0.0.0.0", port=8000, reload=reload_mode, log_level="info")
            return
            
        # Use import string format for reload mode
        # The startup script will be executed when the app is loaded
        uvicorn.run("backend.cors_startup:app", host="0.0.0.0", port=8000, reload=reload_mode, log_level="info")
        
    except KeyboardInterrupt:
        print("Backend process terminated by user")
    except Exception as e:
        print(f"Error running enhanced backend: {str(e)}")
        print("Trying to run without reload mode...")
        try:
            # Try again without reload mode
            run_backend_with_cors(reload_mode=False)
        except Exception as e2:
            print(f"Error running backend without reload mode: {str(e2)}")
            sys.exit(1)

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description="Run the Job Recommender API backend with CORS middleware"
    )
    parser.add_argument(
        "--no-reload", 
        action="store_true",
        help="Disable reload mode (use this if you encounter reload-related issues)"
    )
    
    return parser.parse_args()

if __name__ == "__main__":
    # Parse command line arguments
    args = parse_args()
    
    # Run backend with or without reload mode
    run_backend_with_cors(reload_mode=not args.no_reload) 