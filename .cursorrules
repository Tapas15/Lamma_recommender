# Cursor Rules - Project Intelligence

## Project Patterns

### Architecture Patterns
- Microservices architecture with FastAPI backend and Streamlit frontend
- RESTful API design with JWT authentication
- MongoDB for data storage
- Ollama for local embeddings
- Feedback collection system for recommendation improvement
- Skill clustering analysis for relationship understanding

### Code Organization
- Backend code in `backend/` directory
- Frontend pages in `pages/` directory
- Main Streamlit app in `streamlit_app.py`
- Utility functions in `utils/` directory
- Setup scripts in root directory

### Naming Conventions
- Snake_case for Python files and functions
- CamelCase for class names
- Descriptive function and variable names
- Prefix test files with `test_`

### Development Workflow
- Modular development approach
- Regular testing implementation
- Documentation updates alongside code changes
- Focus on core functionality first

### Technical Decisions
- MongoDB for flexible data storage
- JWT with refresh tokens for authentication
- Local embedding generation with Ollama
- Streamlit for rapid UI development and testing
- Next.js for production frontend with enhanced features
- Structured feedback collection for recommendation improvement
- Confidence-based skill clustering for relationship analysis
- Plotly for current data visualization (transitioning to Highcharts)
- Highcharts integration planned for advanced analytics dashboards

## Project Intelligence

### Critical Implementation Paths
- Authentication flow
- Profile management
- Job posting system
- Recommendation engine using vector embeddings
- Skill gap analysis
- Feedback collection and analysis
- Skill relationship modeling

### Known Challenges
- MongoDB connection stability
- Embedding generation performance
- Memory usage optimization
- Complex user flows
- Import path management
- Authentication token handling for testing

### Tool Usage
- Virtual environment for dependency management
- Platform-independent setup scripts
- Automated testing framework
- Batch files for service management

## User Preferences
- Modular code organization
- Clear documentation
- Performance-optimized implementations
- Cross-platform compatibility
- Comprehensive API testing
- Detailed endpoint documentation

## Evolution Notes
- Project is in active development
- Focus on core functionality implementation
- Testing and documentation are ongoing processes
- Recent additions include recommendation feedback system and skill clusters analysis
- Import path issues being addressed for smoother development

## API Patterns
- RESTful endpoint structure
- Consistent parameter naming
- Query parameter validation
- Structured response formats
- Detailed error messages
- Authentication middleware
- Backward compatibility support
- Versioned endpoints where needed
- Comprehensive documentation
- Test scripts for each endpoint

## Feedback System Patterns
- Structured feedback collection with relevance and accuracy scores
- User action tracking (viewed, applied, saved, dismissed)
- Qualitative feedback through text comments
- Aggregated feedback statistics by time period and recommendation type
- Different views for employers and candidates
- Detailed validation of input parameters
- Comprehensive error handling

## Skill Analysis Patterns
- Confidence-based skill clustering
- Core skills and related skills grouping
- Industry relevance mapping
- Growth rate and market demand calculation
- Parameterized endpoint with confidence thresholds
- Detailed cluster statistics and metadata
- Comprehensive documentation with examples

### Data Visualization Evolution
- **Current State**: Plotly charts in Streamlit for basic visualization
- **Next Phase**: Highcharts integration for enhanced dashboard experience
- **Planned Chart Types**: Vector, bubble, scatter, timeline, and bar charts
- **Focus Areas**: Skill relationships, career progression, analytics performance
- **Design Goals**: Interactive, responsive, accessible visualizations 